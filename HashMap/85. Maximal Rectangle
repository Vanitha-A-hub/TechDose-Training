class Solution {
    public int largestRectangle(int[] a){
        int left[]=new int[a.length];
        int right[]=new int[a.length];
        Stack<Integer> s=new Stack<>();
        for(int i=0;i<a.length;i++){
            while(!s.empty() && a[i]<=a[s.peek()]){
                s.pop();
            }
            left[i]=s.empty()?0:s.peek()+1;
            s.push(i);
        }
        while(!s.empty()){
            s.pop();
        }
        for(int i=a.length-1;i>=0;i--){
            while(!s.empty() && a[i]<=a[s.peek()]){
                s.pop();
            }
            right[i]=s.empty()?a.length-1:s.peek()-1;
            s.push(i);
        }
        int max=Integer.MIN_VALUE;
        for(int i=0;i<a.length;i++){
            max=Math.max(max,(right[i]-left[i]+1)*a[i]);
        }
        return max;
    }
    public int maximalRectangle(char[][] matrix) {
        int maxRect=Integer.MIN_VALUE;
        int temp[]=new int[matrix[0].length];
        for(char[] m:matrix){
            for(int i=0;i<m.length;i++){
                if(m[i]=='1'){
                    temp[i]+=1;
                }
                else{
                    temp[i]=0;
                }
            }
            System.out.println(Arrays.toString(temp));
            maxRect=Math.max(maxRect,largestRectangle(temp));
            System.out.println(maxRect);
        }
        return maxRect;
    }
}
