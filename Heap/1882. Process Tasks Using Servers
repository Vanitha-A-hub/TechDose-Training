class Solution {
    public int[] assignTasks(int[] servers, int[] tasks) {
        int res[]=new int[tasks.length];
        Queue<int[]> available=new PriorityQueue<>((a,b)->a[0]!=b[0]?a[0]-b[0]:a[1]-b[1]);
        Queue<int[]> unavailable=new PriorityQueue<>((a,b)-> a[2]!=b[2]?a[2]-b[2]:(a[0]!=b[0])? a[0]-b[0] : a[1]-b[1]);
        for(int i=0;i<servers.length;i++){
            available.add(new int[]{servers[i],i,0});
        }
        for(int i=0;i<tasks.length;i++){
            while(!unavailable.isEmpty() && unavailable.peek()[2]==i){
                available.add(unavailable.poll());
            }
            if(!available.isEmpty()){
                int curr[]=available.poll();
                res[i]=curr[1];
                curr[2]=i+tasks[i];
                unavailable.add(curr);
            }else{
                int curr[]=unavailable.poll();
                res[i]=curr[1];
                curr[2]+=tasks[i];
                unavailable.add(curr);
            }
        }
        return res;
    }
}
