class Solution {
    Set<String> generatedParentheses=new HashSet<>(); 
    List<String> res=new ArrayList<>();
    public List<String> removeInvalidParentheses(String s) {
        int n=invalidParentheses(s);
        validParenthesesSet(s,n);
        return res;
    }
    public int invalidParentheses(String s){
        int count=0;
        Stack<Character> st=new Stack<>();
        for(int i=0;i<s.length();i++){
            if(s.charAt(i)=='('){
                st.push('(');
            }else if(s.charAt(i)==')'){
                if(!st.isEmpty() && st.peek()=='('){
                    st.pop();
                }else{
                    count++;
                }
            }
        }
        return count+st.size();
    }
    public void validParenthesesSet(String s,int n){
        if(generatedParentheses.contains(s)){
            return;
        }else{
            generatedParentheses.add(s);
        }
        if(n==0){
            if(invalidParentheses(s)==0){
                res.add(s);
            }
            return;
        }
        for(int i=0;i<s.length();i++){
            String fSub=s.substring(0,i);
            String lSub=s.substring(i+1);
            validParenthesesSet(fSub+lSub,n-1);
        }
    }
}
