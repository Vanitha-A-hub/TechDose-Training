class Trie {
    public class Node {
        char ch;
        boolean isEnd;
        Node[] alpha;
        Node(char ch){
            this.ch=ch;
            this.isEnd=false;
            this.alpha=new Node[26];
        }
    }
    Node root;
    public Trie() {
        root=new Node('\0');
    }
    
    public void insert(String word) {
        Node curr=root;
        for(char ch:word.toCharArray()){
            if(curr.alpha[ch-'a']==null){
                curr.alpha[ch-'a']=new Node(ch);
            }
            curr=curr.alpha[ch-'a'];
        }
        curr.isEnd=true;
    }
    
    public boolean search(String word) {
        Node curr=root;
        for(char ch:word.toCharArray()){
            if(curr.alpha[ch-'a']==null){
                return false;
            }
            curr=curr.alpha[ch-'a'];
        }
        return curr.isEnd;
    }
    
    public boolean startsWith(String prefix) {
        Node curr=root;
        for(char ch:prefix.toCharArray()){
            if(curr.alpha[ch-'a']==null){
                return false;
            }
            curr=curr.alpha[ch-'a'];
        }
        return true;
    }
}

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * boolean param_2 = obj.search(word);
 * boolean param_3 = obj.startsWith(prefix);
 */
